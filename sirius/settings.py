"""
Django settings for sirius project.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
import sys
from pathlib import Path

import dj_database_url
import sentry_sdk
from configurations import Configuration, values
from sentry_sdk.integrations.django import DjangoIntegration


class Common(Configuration):
    """The common settings and the default configuration."""

    # Build paths inside the project like this: BASE_DIR / 'subdir'.
    BASE_DIR = Path(__file__).resolve().parent.parent
    SITE_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
    SITE_NAME = os.path.basename(BASE_DIR)
    sys.path.append(BASE_DIR)

    # Static files (CSS, JavaScript, Images)
    # https://docs.djangoproject.com/en/5.1/howto/static-files/

    STATIC_ROOT = os.path.join(SITE_ROOT, "static")
    STATIC_URL = "static/"

    # Quick-start development settings - unsuitable for production
    # See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

    # SECURITY WARNING: keep the secret key used in production secret!
    SECRET_KEY = values.SecretValue() if values.SecretValue() == "None" else "ABC"

    # TODO: fix this config
    ALLOWED_HOSTS = ["*"]

    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SAMESITE = "Lax"
    CSRF_COOKIE_SECURE = False
    CSRF_TRUSTED_ORIGINS = [
        "https://hack.siriusapi.online",
        "https://aprendeconsirius.com",
        "https://www.aprendeconsirius.com",
        "http://localhost:5173",
        "http://localhost:9000",
        "http://127.0.0.1:9000",
    ]

    # Application definition

    INSTALLED_APPS = [
        "django.contrib.admin",
        "django.contrib.auth",
        "django.contrib.contenttypes",
        "django.contrib.sessions",
        "django.contrib.messages",
        "django.contrib.staticfiles",
        "rest_framework",
        "rest_framework.authtoken",
        "corsheaders",
        "core",
    ]

    REST_FRAMEWORK = {
        "DEFAULT_AUTHENTICATION_CLASSES": [
            "rest_framework.authentication.TokenAuthentication",
            "rest_framework.authentication.SessionAuthentication",
        ],
        "DEFAULT_PERMISSION_CLASSES": [
            "rest_framework.permissions.IsAuthenticated",
        ],
    }

    MIDDLEWARE = [
        "corsheaders.middleware.CorsMiddleware",
        "django.middleware.security.SecurityMiddleware",
        "django.contrib.sessions.middleware.SessionMiddleware",
        "django.middleware.common.CommonMiddleware",
        "django.middleware.csrf.CsrfViewMiddleware",
        "django.contrib.auth.middleware.AuthenticationMiddleware",
        "django.contrib.messages.middleware.MessageMiddleware",
        "django.middleware.clickjacking.XFrameOptionsMiddleware",
        # custom middleware
        "core.middleware.StudentMiddleware",
    ]

    ROOT_URLCONF = "sirius.urls"

    TEMPLATES = [
        {
            "BACKEND": "django.template.backends.django.DjangoTemplates",
            "DIRS": [os.path.join(SITE_ROOT, "templates")],
            "APP_DIRS": True,
            "OPTIONS": {
                "context_processors": [
                    "django.template.context_processors.debug",
                    "django.template.context_processors.request",
                    "django.contrib.auth.context_processors.auth",
                    "django.contrib.messages.context_processors.messages",
                ],
            },
        },
    ]

    WSGI_APPLICATION = "sirius.wsgi.application"

    # Database
    # https://docs.djangoproject.com/en/5.1/ref/settings/#databases

    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }

    # Password validation
    # https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

    AUTH_PASSWORD_VALIDATORS = [
        {
            "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
        },
        {
            "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        },
        {
            "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
        },
        {
            "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
        },
    ]

    # Internationalization
    # https://docs.djangoproject.com/en/5.1/topics/i18n/

    LANGUAGE_CODE = "en-us"

    TIME_ZONE = "UTC"

    USE_I18N = True

    USE_TZ = True

    # Default primary key field type
    # https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

    DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

    CORS_ALLOWED_ORIGINS = [
        "http://localhost:5173",
        "https://aprendeconsirius.com",
    ]
    CORS_ALLOW_CREDENTIALS = True

    ANSWER_TYPE_AUDIO = "audio"
    ANSWER_TYPE_CODE = "code"
    ANSWER_TYPE_TEXT = "text"

    CHALLENGE_LEVEL_CHOICES = [(level, str(level)) for level in range(1, 8)]

    LLM_PROVIDER = "openai"
    LLM_MODEL = "gpt-4o-mini"
    LLM_MAX_TOKENS = 1000
    LLM_MODEL_SPEECH_TO_TEXT = "whisper-1"

    OPENAI_PROVIDER = "openai"
    OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
    OPENAI_CHALLENGE_SCHEMA = "challenge"
    OPENAI_FEEDBACK_SCHEMA = "feedback"

    SPACED_REPETITION_MOMENT_CHOICES = [(moment, str(moment)) for moment in range(1, 4)]

    sentry_sdk.init(
        dsn=os.getenv("SENTRY_DSN", ""),
        integrations=[DjangoIntegration()],
        traces_sample_rate=1.0,
        send_default_pii=True,
    )


class Development(Common):
    """The development settings."""

    LOGGER_NAME = "sirius"
    LOGGING = {
        "version": 1,
        "disable_existing_loggers": False,
        "formatters": {
            "verbose": {
                "format": "[{asctime} | {levelname}] [{module}]: {message}",
                "style": "{",
            },
        },
        "handlers": {
            "console": {
                "level": "INFO",
                "class": "logging.StreamHandler",
                "formatter": "verbose",
                "stream": sys.stdout,
            },
        },
        "loggers": {
            "sirius": {"handlers": ["console"], "level": "INFO"},
            "django": {"handlers": ["console"], "level": "INFO"},
        },
    }

    # SECURITY WARNING: don't run with debug turned on in production!
    DEBUG = True


class Staging(Development):
    """The in-staging settings."""

    DATABASE_URL = os.getenv("DATABASE_URL")
    DATABASES = {}
    DATABASES["default"] = dj_database_url.config(default=DATABASE_URL)
    DATABASES["default"]["MANAGED"] = True

    CSRF_COOKIE_SAMESITE = "None"
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SAMESITE = "None"
    SESSION_COOKIE_SECURE = True


class Production(Staging):
    """The in-production settings."""

    DEBUG = False
    Common.TEMPLATES[0]["OPTIONS"]["debug"] = DEBUG
